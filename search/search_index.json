{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Vixen Shell","text":""},{"location":"#presentation","title":"Presentation","text":"<p>The Vixen Shell project is an initiative dedicated to creating a highly customizable desktop environment for Wayland users on Linux. Designed with a focus on development, it allows users to code the various components necessary to build their own desktop environment. This project is particularly useful for users of window managers such as Sway or Hyprland.</p> <p>Vixen Shell stands out by using Python for the back-end, while the user interface (front-end) is developed with modern web technologies such as React, TypeScript and CSS.</p> <p>The project was initially intended for Hyprland, but during its development, its flexibility has allowed it to be adapted to other window managers. This is why, as you will discover by reading this documentation, there are pre-existing features dedicated to Hyprland in Vixen Shell's extras and many references and examples related to Hyprland.</p> Prerequistes <p>Before getting started with Vixen Shell, make sure you have the following:</p> <ol> <li> <p>Operating System:</p> <ul> <li>A Linux distribution compatible with Wayland (e.g., Ubuntu, Fedora, Arch Linux, Manjaro Linux).</li> </ul> </li> <li> <p>Window Manager:</p> <ul> <li>Sway, Hyprland, or any other window manager compatible with Wayland.</li> </ul> </li> <li> <p>Languages and Technologies:</p> <ul> <li>Python: Ensure Python is installed (version 3.11 or higher).</li> <li>yarn: For managing dependencies and building front-end components.</li> </ul> </li> <li> <p>Development Tools:</p> <ul> <li>A code editor or IDE (Visual Studio Code is recommended).</li> <li>Git for version control (Recommended).</li> </ul> </li> <li> <p>Permissions and Access:</p> <ul> <li>Administrator or superuser access to install certain dependencies and perform system configurations.</li> </ul> </li> </ol> <p>Version 1.0.0b1</p> <p>Currently, Vixen Shell is in Beta. Installing it should not pose any particular risks to your system. Your feedback would be extremely valuable to me if you are interested in this project.</p> <ul> <li> <p> Linux</p> <p>The free and open-source operating system for everyone.</p> </li> <li> <p> Python</p> <p>Python is a programming language that lets you work quickly and integrate systems more effectively.</p> <p> Visit</p> </li> <li> <p> TypeScript</p> <p>TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.</p> <p> Visit</p> </li> <li> <p> React</p> <p>A JavaScript library for building user interfaces.</p> <p> Visit</p> </li> </ul>"},{"location":"#under-the-hood","title":"Under the Hood","text":""},{"location":"#vixen-shell-core","title":"Vixen Shell Core","text":"<ul> <li> <p>GTK3 (GIMP Toolkit 3): GTK3, well-known among developers, is an open-source graphical library used to create graphical user interfaces (GUIs). It provides a wide range of widgets and controls for developing modern applications with attractive and responsive interfaces. In Vixen Shell, GTK3 is primarily used for window management.</p> </li> <li> <p>WebKitGTK (or GTKWebKit2): WebKitGTK is a version of the WebKit rendering engine adapted for integration with GTK. WebKit is used by browsers like Safari. WebKitGTK allows embedding web content into GTK applications, offering capabilities for web navigation and HTML content display. Through WebKitGTK, Vixen Shell can display web content to generate user interfaces.</p> </li> <li> <p>GTK Layer Shell: GTK Layer Shell is a library enabling GTK applications to utilize the layer surfaces functionality of Wayland, a modern display server protocol for Linux. This is particularly useful for applications like panels, docks, or notifications that require precise control over their positioning and appearance on the screen.</p> </li> <li> <p>FastAPI: FastAPI is a modern and high-performance web framework for building APIs with Python 3.7+ based on standard Python type annotations. It's designed to produce robust and efficient web applications. FastAPI primarily serves as the backend engine for Vixen Shell.</p> </li> </ul>"},{"location":"#vixen-shell-features","title":"Vixen Shell Features","text":"<p>With Vixen Shell, you can create your own user interface features. To generate these features, Vixen Shell requires two types of support to create the configuration:</p> <ul> <li> <p>Python: A Python module will generate the root configuration for your feature and, if necessary, enrich the backend with customized data and actions.</p> </li> <li> <p>TypeScript: The user interface will be implemented in TypeScript using the React framework.</p> </li> </ul> <p>These configuration files are automatically generated by the Vixen Shell manager's command line tool (vxm) when creating a new feature.</p> <p>Note</p> <p>Vixen Shell requires no special dependency installations, except for Yarn, which is used to build the user interface content. This is possible because Vixen Shell operates within its own Python virtual environment.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>There are many projects similar to Vixen Shell, each with their own architecture:</p> <ul> <li>nwg-shell: A set of GTK-based tools designed to provide a feature-rich desktop environment for sway and other wlroots-based compositors.</li> <li>Eww: The ElKowar's Wacky Widgets (eww) framework allows you to create custom widgets for your desktop, using a flexible and scriptable XML configuration.</li> <li>Waybar: A highly customizable status bar for Wayland compositors, especially sway, written in C++.</li> </ul>"},{"location":"#about-the-autor","title":"About the Autor","text":"<p>Nohavye</p> <p> I am passionate about application development and constantly seeking enriching experiences to deepen my skills. With recent training in JavaScript React Application Development, I am excited to contribute to innovative projects.</p> <p>Thank you for taking the time to read this documentation. Your interest and support are greatly appreciated. I hope you find Vixen Shell useful. If you have any questions, feedback, or contributions, please feel free to reach out via my GitHub profile. Happy coding!</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#basic-commands","title":"Basic commands","text":"<ul> <li><code>vxm --help</code> - Show Vixen Shell help commands.</li> <li><code>vxm --shell {open, close}</code> - Start / Close Vixen Shell.</li> <li><code>vxm --setup {update, remove}</code> - Update / Remove Vixen Shell.</li> </ul>"},{"location":"commands/#advanced-commands","title":"Advanced commands","text":"<ul> <li><code>vxm --env {install, uninstall}</code> - Environment controls.</li> <li><code>vxm --dev {run, new}</code> - Development controls.</li> <li><code>vxm --features {names, add, remove}</code> - Features controls.</li> <li><code>vxm --frames {ids, toggle, open, close}</code> - Feature frames controls.</li> </ul>"},{"location":"install/","title":"Install Vixen Shell","text":"Prerequistes <p>Before getting started with Vixen Shell, make sure you have the following:</p> <ol> <li> <p>Operating System:</p> <ul> <li>A Linux distribution compatible with Wayland (e.g., Ubuntu, Fedora, Arch Linux, Manjaro Linux).</li> </ul> </li> <li> <p>Window Manager:</p> <ul> <li>Sway, Hyprland, or any other window manager compatible with Wayland.</li> </ul> </li> <li> <p>Languages and Technologies:</p> <ul> <li>Python: Ensure Python is installed (version 3.11 or higher).</li> <li>yarn: For managing dependencies and building front-end components.</li> </ul> </li> <li> <p>Development Tools:</p> <ul> <li>A code editor or IDE (Visual Studio Code is recommended).</li> <li>Git for version control (Recommended).</li> </ul> </li> <li> <p>Permissions and Access:</p> <ul> <li>Administrator or superuser access to install certain dependencies and perform system configurations.</li> </ul> </li> </ol>"},{"location":"install/#install","title":"Install","text":"<p>Yarn</p> <ul> <li> <p>Before proceeding with the installation, ensure that Yarn is installed on your system. You can check if Yarn is installed by running the following command in your terminal:</p> <pre><code>yarn --version\n</code></pre> </li> <li> <p>If Yarn is not installed or if the command returns an error, you can install Yarn using the appropriate method for your system.</p> Arch Linux based distribution<pre><code>sudo pacman -S yarn\n</code></pre> </li> </ul> <ul> <li>Go to the Vixen Shell repository and download the project archive in ZIP format.</li> </ul> <ul> <li> Vixen Shell Repository</li> <li> Download Vixen Shell Archive</li> </ul> <ul> <li> <p>Once the download is complete, locate the ZIP file in your download folder. Right-click on the archive and select the option to extract the files. You can also use the command line:</p> <pre><code>unzip vixen-shell-main.zip\n</code></pre> </li> <li> <p>After extracting the files, navigate to the newly created directory:</p> <pre><code>cd vixen-shell-main\n</code></pre> </li> <li> <p>In the extracted directory, run the installation script as an administrator with the following command:</p> <pre><code>sudo ./install\n</code></pre> </li> <li> <p>Confirm your choice and this script will install Vixen Shell on your system.</p> All set! Vixen Shell is installed. <p></p> </li> </ul>"},{"location":"install/#post-install","title":"Post-install","text":"<ul> <li> <p>To start, you can verify that Vixen Shell starts correctly by running the following command in a terminal:</p> <pre><code>vxm --shell open\n</code></pre> If everything is working properly, Vixen Shell should start without any errors. <p> Type CTRL+C to exit Vixen Shell ...</p> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"install/#system-extra-feature","title":"System Extra Feature","text":"<p>Next, I recommend installing the additional system feature of Vixen Shell by running the following command:</p> <p><pre><code>vxm --features add --extra system\n</code></pre> This feature allows you to obtain information and execute commands on your system.</p> <p>Note</p> <p>At the moment, the 'system' feature is still relatively limited, but it will be expanded in the future.</p>"},{"location":"install/#hyprland-extra-feature","title":"Hyprland Extra Feature","text":"<p>For Hypreland user, I strongly recommend installing the additional hypland feature. It will allow you to retrieve extensive information about the window manager as well as access to the UNIX socket that continuously broadcasts Hyprland events.</p> <pre><code>vxm --features add --extra hyprland\n</code></pre>"},{"location":"install/#vixen-shell-startup","title":"Vixen Shell Startup","text":"<p>To finish, all you need to do is configure Vixen Shell to start automatically when your window manager starts. (e.g., startup script, window manager configuration file - adapt the method according to your window manager or configuration)</p> <p>Under Hyprland, you simply need to edit the configuration file (hyprland.conf) and add the following line to your startup section:</p> hyprland.conf<pre><code>exec-once = vxm --shell open\n</code></pre>"},{"location":"install/#uninstall-vixen-shell","title":"Uninstall Vixen Shell","text":"<ul> <li> <p>To uninstall Vixen Shell from your system, simply type the following command:</p> <pre><code>sudo vxm --setup remove\n</code></pre> </li> <li> <p>Confirm your choice ...</p> Of course, Vixen Shell will be completely uninstalled. <p></p> </li> </ul>"},{"location":"features/intro/","title":"Vixen Shell Features","text":""},{"location":"features/intro/#introduction","title":"Introduction","text":"<p>Vixen Shell allows you to create your own user interfaces for your desktop environment. You can create integrated elements such as docks, panels, status bars, or even widgets, as well as windowed elements like menus, configuration spaces, or small utilities.</p> <p>To generate these features, Vixen Shell requires two main types of support to create the configuration:</p> <ul> <li>A Python module will generate the root configuration for your feature and, if necessary, enrich the backend with customized data and actions.</li> <li>The user interface content coded in TypeScript using React. (optional, as a Vixen Shell feature does not necessarily require a user interface).</li> <li>If needed, a JSON file representing the user-side configuration.</li> </ul> <p>Info</p> <p>These configuration files are automatically generated by the Vixen Shell manager's command line tool (vxm) when creating a new feature.</p>"},{"location":"features/intro/#constituent-elements","title":"Constituent Elements","text":"<code>Feature</code> <p>To create these elements, Vixen Shell uses what we will refer to as \"features.\"</p> <p>In Vixen Shell, a feature represents an extension (similar to Gnome Shell extensions) that contains all the code needed to make it work.</p> <p>A feature will contain a <code>Root Module</code> and a <code>User Configuration</code>. If the feature exposes a user interface, it will also include <code>Frames</code>, <code>Routes</code> and <code>State</code>.</p> <code>Root Module</code> <p>A root module involves implementing a Python module that defines the basic parameters and enriches the backend with specific data and actions.</p> <code>User Configuration</code> <p>The user configuration will take the form of a JSON file stored in the user's <code>$HOME</code> directory. This file will allow the modification and saving of certain feature parameters as needed.</p> <p>Additionally, the state of the feature, if applicable, will be stored in this same file.</p> <code>Frame</code> <p>A frame represents the visual spaces of the feature. It renders the user interface in the form of panels, bars, widgets, or windows, etc.</p> <code>Route</code> <p>A route allows frames to be directed to a specific path. A feature can contain multiple routes to display various user interface elements through the different frames that comprise it.</p> <code>State</code> <p>The state represents the application's state, capable of holding any type of data serializable in JSON format. It is shared and accessible across different routes.</p> <p>It also allows preserving the state of the feature after closing a session if necessary.</p>"},{"location":"features/intro/#in-this-section","title":"In This Section","text":"<p>Create a Feature Project</p> <p>Add a Feature to Vixen Shell</p>"},{"location":"features/manage/","title":"Vixen Shell Features","text":""},{"location":"features/manage/#create-a-feature-project","title":"Create a feature project","text":"<p>Creating a new feature with Vixen Shell is similar to starting a development project. The <code>vxm</code> command-line tool provides the necessary commands for managing these projects.</p> <ul> <li> <p>To create a new feature, first navigate to the directory where you want to create your project. Open a terminal and type the following command:</p> <pre><code>vxm --dev create\n</code></pre> </li> <li> <p>Enter the name of your feature. If an existing feature in Vixen Shell has the same name, you will be prompted to choose a different one.</p> </li> <li>Then, decide whether you want to include a front-end base in your project.</li> <li> <p>Finally, validate your choices.</p> <p>Your new feature project has just been created !</p> <p> Here we have just created a development project for a Vixen Shell feature without a front-end base.</p> <p>A new folder named <code>vx-feature-[feature name]</code> has just been created, containing the necessary files for editing your new feature.</p> <p>You can choose between two types of features.</p> <p>You can choose between two types of features: with or without front-end user interfaces. To do this, simply answer 'yes' or 'no' to the second question 'Would you like to include a front-end base in your project?'.</p> <p>Now you can open your project using your preferred IDE or text editor.</p> <p>I personally recommend using Visual Studio Code because it comes with integrated configuration by Vixen Shell for development projects, providing autocomplete to enhance your workflow.</p> </li> </ul> <p>After creating your project, you can launch it in development mode to visualize and test the outcome of your work.</p> <ul> <li> <p>To do this, navigate to your project directory:</p> <pre><code>cd vx-feature-[feature name]\n</code></pre> </li> <li> <p>Then, once inside your project directory, execute the following command:</p> <pre><code>vxm --dev run\n</code></pre> </li> </ul>"},{"location":"features/manage/#add-a-feature-to-vixen-shell","title":"Add a Feature to Vixen Shell","text":"<p>Project tree structure</p> <ul> <li>vx-feature-[feature name]<ul> <li>.vscode<ul> <li>settings.json</li> </ul> </li> <li>root<ul> <li>[feature name]<ul> <li>__init__.py</li> </ul> </li> </ul> </li> <li>user<ul> <li>[feature name].json</li> </ul> </li> <li>.gitignore</li> <li>LICENSE</li> <li>README.md</li> </ul> </li> </ul>"}]}